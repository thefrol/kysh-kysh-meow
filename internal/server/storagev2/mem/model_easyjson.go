// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mem

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeGithubComThefrolKyshKyshMeowInternalServerStoragev2Mem(in *jlexer.Lexer, out *GaugesMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(GaugesMap)
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v1 float64
			v1 = float64(in.Float64())
			(*out)[key] = v1
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComThefrolKyshKyshMeowInternalServerStoragev2Mem(out *jwriter.Writer, in GaugesMap) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in {
			if v2First {
				v2First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v2Name))
			out.RawByte(':')
			out.Float64(float64(v2Value))
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v GaugesMap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComThefrolKyshKyshMeowInternalServerStoragev2Mem(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GaugesMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComThefrolKyshKyshMeowInternalServerStoragev2Mem(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GaugesMap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComThefrolKyshKyshMeowInternalServerStoragev2Mem(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GaugesMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComThefrolKyshKyshMeowInternalServerStoragev2Mem(l, v)
}
func easyjsonC80ae7adDecodeGithubComThefrolKyshKyshMeowInternalServerStoragev2Mem1(in *jlexer.Lexer, out *IntMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(IntMap)
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v3 int64
			v3 = int64(in.Int64())
			(*out)[key] = v3
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComThefrolKyshKyshMeowInternalServerStoragev2Mem1(out *jwriter.Writer, in IntMap) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v4First := true
		for v4Name, v4Value := range in {
			if v4First {
				v4First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v4Name))
			out.RawByte(':')
			out.Int64(int64(v4Value))
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v IntMap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComThefrolKyshKyshMeowInternalServerStoragev2Mem1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IntMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComThefrolKyshKyshMeowInternalServerStoragev2Mem1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IntMap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComThefrolKyshKyshMeowInternalServerStoragev2Mem1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IntMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComThefrolKyshKyshMeowInternalServerStoragev2Mem1(l, v)
}
